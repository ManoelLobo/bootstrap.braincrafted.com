<section>
    <div class="page-header">
        <h2>Installation</h2>
    </div>

    <p>BraincraftedBootstrapBundle should be installed using <a href="http://getcomposer.org">Composer</a>:</p>

    <pre><code class="json">{
    "require": {
        "braincrafted/bootstrap-bundle": "2.0.*"
    }
}</code></pre>

    <p>By default BraincraftedBootstrapBundle <strong>does not include Bootstrap and jQuery</strong>. Some people want to use Composer for these dependencies, other people prefer tools designed for managing assets like Bower. If you want to use such a tool we assume you know how to use it. If you have no experience with these tools you probably want to stick with those from the PHP/Symfony2 world, that is, Composer. You can use the following code in your <code>composer.json</code> to include Bootstrap and jQuery into your Symfony2 project:</p>

    <pre><code class="json">{
    "repositories": [
        {
            "type": "package",
            "package": {
                "name": "jquery/jquery",
                "version": "1.10.2",
                "dist": {
                    "url": "http://code.jquery.com/jquery-1.10.2.js",
                    "type": "file"
                }
            }
        }
    ],
    "require": {
        ... other dependencies
        "twbs/bootstrap": "3.0.*",
        "jquery/jquery":  "1.10.*"
    }
}
    </code></pre>

    <p>Of course you also need to add the bundle to your <code>AppKernel.php</code>:</p>

    <pre><code class="php"># app/AppKernel.php

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            // ...
            new Braincrafted\Bundle\BootstrapBundle\BraincraftedBootstrapBundle(),
        );
        // ...
    }
}

</code></pre>

    <p>BraincraftedBootstrapBundle highly recommends you to use Assetic for managing assets. If you do use Assetic for managing your assets you should now run the <code>dump</code> command.</p>

    <pre><code>php app/console assetic:dump</code></pre>

    <p><span class="label label-info">Please note</span> Assetic needs to compile the LESS files from Bootstrap and therefore requires either <a href="http://lesscss.org">LESS</a> or <a href="http://leafo.net/lessphp/">lessphp</a>. The following section explains how to install and configure them.</p>

    <h3>Installing a LESS compiler</h3>

    <p>As mentioned above you need either LESS or lessphp. Not both.</p>

    <p><span class="label label-primary">Don't forget</span> You have to install the library, configure Assetic to compile <code>.less</code> files using that library and you have to tell BraincraftedBootstrapBundle if you want to use <code>less</code> or <code>lessphp</code>.</p>

    <h4>LESS</h4>

    <p>We highly recommend using the original version of LESS, since the developers of Bootstrap only use this version to compile the stylesheets and it can happen that Bootstrap does not compile with lessphp. To install LESS you need <a href="https://npmjs.org">NPM</a>.</p>

    <pre><code>npm install -g less</code></pre>

    <p>You probably need to configure Assetic to use the installed binary. Please change the path to Node.js where you have installed Node.js on your system.</p>

    <pre><code># app/config/config.yml
assetic:
    filters:
        less:
            node: /usr/local/bin/node
            node_paths: [/usr/local/lib/node_modules]
            apply_to: "\.less$"
        cssrewrite: ~
braincrafted_bootstrap:
    less_filter: less</code></pre>

    <h4>lessphp</h4>

    <p>Although it is not recommended to use lessphp, you can use it and install it via Composer.</p>

    <pre><code class="json">{
  "require": {
    "leafo/lessphp": "0.4.0"
  }
}</code></pre>

    <p>And add the following section to your config.</p>

    <pre><code class="yamnl"># app/config/config.yml
assetic:
    filters:
        lessphp:
             file: %kernel.root_dir%/../vendor/leafo/lessphp/lessc.inc.php
             apply_to: "\.less$"
        cssrewrite: ~
braincrafted_bootstrap:
    less_filter: lessphp</code></pre>

    <p><span class="label label-info">Hint</span> If a new version of Bootstrap no longer compiles with lessphp, check the <a href="http://leafo.net/lessphp/">lessphp website</a> if a new version has been released.</p>

</section>

<section id="configuration">
    <div class="page-header">
        <h2>Configuration</h2>
    </div>

    <p>BraincraftedBootstrapBundle can be configured using your projects <code>config.yml</code>. The following snippet shows all possible configuration options and their default values.</p>

    <p>The options under <code>auto_configure</code> are used to disable the auto configuration functionality of BraincraftedBootstrapBundle. For example, if you want to override the default Assetic configuration of the bundle you need to set the value to <code>false</code>.</p>

    <pre><code class="yaml"># app/config/config.yml
braincrafted_bootstrap:
    output_dir: %kernel.root_dir%/../web
    assets_dir: %kernel.root_dir%/../vendor/twbs/bootstrap
    jquery_path: %kernel.root_dir%/../vendor/jquery/jquery/jquery-1.9.1.js
    less_filter: less # "less", "lessphp" or "none"
    auto_configure:
        assetic: true
        twig: true
        knp_menu: true
        knp_paginator: true
    customize_variables:
        variables_file: ~
        bootstrap_output: %kernel.root_dir%/Resources/less/bootstrap.less
        bootstrap_template: BraincraftedBootstrapBundle:Bootstrap:bootstrap.less.twig</code></pre>

    <h3>Assetic Configuration</h3>

    <p>If the option <code>braincrafted_bootstrap.auto_configure.assetic</code> is set to <code>true</code> the bundle configures Assetic for you. In case you want to adapt the configuration, you can use the default one.</p>

    <pre><code class="yaml"># app/config/config.yml

assetic:
    ...
    assets:
        bootstrap_css:
            inputs:
                - %kernel.root_dir%/../vendor/twitter/bootstrap/less/bootstrap.less
            filters:
                - less
                - cssrewrite
            output: css/bootstrap.css
        bootstrap_js:
            inputs:
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/transition.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/alert.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/button.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/carousel.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/collapse.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/dropdown.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/modal.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/tooltip.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/popover.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/scrollspy.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/tab.js
                - %kernel.root_dir%/../vendor/twitter/bootstrap/js/affix.js
                - %kernel.root_dir%/../vendor/braincrafted/bootstrap-bundle/Braincrafted/Bundle/BootstrapBundle/Resources/js/bc-bootstrap-collection.js
            output: js/bootstrap.js
        jquery:
            inputs:
                - %kernel.root_dir%/../vendor/jquery/jquery/jquery-1.9.1.js
            output: js/jquery.js
    </code></pre>

    <h3>Customizing Bootstrap</h3>

    <p>Bootstraps has the ability to be modified by manipulating the <code>variables.less</code> file provided with the framework. However, since this bundle uses Composer to download and install Bootstrap we can not overwrite the <code>variables.less</code> file (every <code>composer update</code> would eliminate changes made to that file). It is required to build a custom <code>bootstrap.less</code> that includes the custom <code>variables.less</code> and all the other <code>.less</code> files from Bootstrap.</p>

    <p>BraincraftedBootstrapBundle helps you by generating a custom <code>bootstrap.less</code> and importing your <code>variables.less</code> and all LESS files from Bootstrap.</p>

    <p>This feature is only activated when:</p>

    <ul>
        <li>The option <code>braincrafted_bootstrap.customize_variables.variables_file</code> is set to a value other than <code>NULL</code></li>
        <li>You use LESS, that is, the option <code>braincrafted_bootstrap.less_filter</code> is set to <code>less</code> or <code>lessphp</code></li>
    </ul>

    <pre><code class="yaml"># app/config/config.yml

braincrafted_bootstrap:
    customize_variables:
        variables_file: %kernel.root_dir%/Resources/less/variables.less
</code></pre>

    <p>It is also possible to use a file provided by a bundle. You can use the option <code>braincrafted_bootstrap.bootstrap_output</code> to configure where BraincraftedBootstrapBundle stores the generated <code>bootstrap.less</code> file. This defaults to <code>app/Resources/less/bootstrap.less</code>. The option <code>braincrafted_bootstrap.customize_variables.bootstrap_template</code> defines the template used to generate the file. You can use two variables <code>variables_file</code> and <code>assets_dir</code>. The later points to the value of the option <code>braincrafted_bootstrap.assets_dir</code>.</p>

    <p>After you configured the bundle with your customer <code>variables.less</code> file you need to generate the <code>bootstrap.less</code> file.</p>

    <pre><code class="bash">$ php app/console braincrafted:bootstrap:generate</code></pre>

    <p>Now you can use <code>assetic:dump</code> to generate the CSS files.</p>

    <p><span class="label label-warning">Warning</span> If you have a custom configuration of Assetic you need to change it in a way that the <code>bootstrap.less</code> file generated by the bundle is used.</p>

    <pre><code class="yaml"># app/config/config.yml

assetic:
    ...
    assets:
        bootstrap_css:
            inputs:
                - %kernel.root_dir%/Resources/less/bootstrap.less
            filters:
                - less
                - cssrewrite
            output: css/bootstrap.css</code></pre>
</section>
